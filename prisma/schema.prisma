// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Applicants {
  applicantId Int    @id @default(autoincrement()) @map("applicantId")
  email       String @unique @map("email")
  password    String @map("password")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  ApplicantInfos ApplicantInfos?
  Resume         Resume[]

  @@map("Applicants")
}

model ApplicantInfos {
  applicantInfoId Int    @id @default(autoincrement()) @map("applicantInfoId")
  ApplicantId     Int    @unique @map("applicantId")
  name            String @map("name")
  age             Int    @map("age")
  gender          String @map("gender")
  role            String @map("role")
  profileImage    String @map("profileImage")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Applicant Applicants @relation(fields: [ApplicantId], references: [applicantId], onDelete: Cascade)

  @@map("ApplicantInfos")
}

model Resume {
  resumeId    Int    @id @default(autoincrement()) @map("resumeId")
  ApplicantId Int    @unique @map("ApplicantId")
  title       String @map("title")
  content     String @map("content")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Applicant Applicants @relation(fields: [ApplicantId], references: [applicantId], onDelete: Cascade)

  @@map("Resume")
}
